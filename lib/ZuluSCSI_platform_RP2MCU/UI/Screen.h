#if defined(CONTROL_BOARD) && !defined(ENABLE_AUDIO_OUTPUT_SPDIF)

#ifndef SCREEN_H
#define SCREEN_H

#include "control.h"
#include "scrolling_text.h"

#define MAX_SCOLLERS 4

class Screen
{
protected:
    Adafruit_SSD1306 &_display;
    
public:
    Screen(Adafruit_SSD1306 &display) : _display(display) {}
    
    void virtual init(int index); // Called when swicthed to the screen
	void virtual tick(); // Called on ever main loop cycle
    
	// Called to draw the screen by tick(). Doesn't need to be called.
	// If the screen has scrollers, then this is called automatically by Screen::tick which is will do the following:
	// - Clear the screen
	// - Update and draw all the scrollers
	// - Call the screen draw()
	// - Do a .display()
	// So cleadScreen() and display() shoud not be called in the draw() in this case.
	// If there are no scollers, then draw() should be called at the end of init() and draw() should do a clearScreen() and call display()
	void virtual draw(); 

	void haltUIUpdates();
	
	// Called on every screen when a new card is inserted
	void virtual sdCardStateChange(bool cardIsPresent);

	void forceDraw();

	void virtual shortRotaryPress();
    void virtual shortUserPress();
    void virtual shortEjectPress();
    void virtual longRotaryPress();
    void virtual longUserPress();
    void virtual longEjectPress();
    void virtual rotaryChange(int direction);

	bool virtual clearScreenOnDraw();

	SCREEN_TYPE virtual screenType();

protected:
	SCREEN_TYPE _type;
	bool _hasDrawn;
	int _iconX;
	char _sizeBuffer[8];

	const uint8_t *getIconForType(S2S_CFG_TYPE deviceType, bool loaded);
	void setScrollerText(int index, const char *text);

	void initScrollers(int total);
    void setupScroller(int index, uint16_t x, uint16_t y, uint16_t w, uint16_t h, int font);
	void resetScrollerDelay();

	void drawIconFromRight(const uint8_t *icon, int extraSpace, int y);
	void makeImageSizeStr(uint64_t size, char *buffer) ;

private:	
	bool _halted;
	absolute_time_t _nextRefresh;
    int _totalScrollers;
    ScrollingText _scrollingText[MAX_SCOLLERS];

	void updateScrollers(absolute_time_t now);
    void displayScrollers();

	const uint8_t  icon_cd[24] = {
		0x0f, 0x00, 0x10, 0x80, 0x20, 0x40, 0x40, 0x20, 0x80, 0x10, 0x86, 0x10, 0x86, 0x10, 0x80, 0x10, 
		0x40, 0x20, 0x20, 0x40, 0x10, 0x80, 0x0f, 0x00
	};

	const uint8_t  icon_floppy[24] ={
		0x7f, 0xe0, 0xe0, 0x70, 0xe3, 0x70, 0xe0, 0x70, 0xff, 0xf0, 0xc0, 0x30, 0xc7, 0x30, 0xc4, 0x30, 
		0xc6, 0x30, 0xc4, 0x30, 0xc0, 0x30, 0x7f, 0xe0
	};

	const uint8_t  icon_removable[24] ={
		0x7f, 0xe0, 0xe0, 0x70, 0xe3, 0x70, 0xe3, 0x70, 0xe0, 0x70, 0xff, 0xf0, 0xc0, 0x30, 0xc0, 0x30, 
		0xc0, 0x30, 0xc0, 0x30, 0xc0, 0x30, 0x7f, 0xe0
	};

	const uint8_t  icon_fixed[24] ={
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x80, 0x10, 0x80, 0xd0, 0x80, 0xd0, 0x80, 0x10, 
		0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	const uint8_t  icon_mo[24] = {
		0x7f, 0xe0, 0xe0, 0x70, 0xe3, 0x70, 0xe0, 0x70, 0xff, 0xf0, 0xc0, 0x30, 0xd1, 0x30, 0xdb, 0x30, 
		0xd5, 0x30, 0xd1, 0x30, 0xc0, 0x30, 0x7f, 0xe0
	};

	const uint8_t  icon_network[24] = {
		0x00, 0x00, 0x0e, 0x00, 0xff, 0xf0, 0x0e, 0x00, 0x04, 0x00, 0x04, 0x00, 0xff, 0xf0, 0x80, 0x10, 
		0x80, 0xd0, 0x80, 0xd0, 0x80, 0x10, 0xff, 0xf0
	};

	const uint8_t  icon_sequential2[24] = {
		0x80, 0x00, 0x80, 0x00, 0x98, 0x00, 0xa4, 0x00, 0x84, 0xc0, 0x89, 0x20, 0x90, 0x20, 0x20, 0x40, 
		0x3c, 0x20, 0x01, 0x20, 0x00, 0xc0, 0x00, 0x00
	};

	const uint8_t  icon_zip[24] =  {
		0x7f, 0xe0, 0xe0, 0x70, 0xe3, 0x70, 0xe0, 0x70, 0xff, 0xf0, 0xc0, 0x30, 0xce, 0x30, 0xc4, 0x30, 
		0xc8, 0x30, 0xce, 0x30, 0xc0, 0x30, 0x7f, 0xe0
	};

	const uint8_t  icon_question[24] =  {
		0x00, 0x00, 0x0f, 0x00, 0x19, 0x80, 0x10, 0x80, 0x01, 0x80, 0x03, 0x00, 0x06, 0x00, 0x04, 0x00, 
		0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00
	};
   
protected:

	const uint8_t  icon_ledon[24] = {
		0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1f, 0x80, 0x3f, 0xc0, 0x3f, 0xc0, 0x3f, 0xc0, 0x3f, 0xc0, 
		0x1f, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	const uint8_t  icon_ledoff[24] = {
		0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x10, 0x80, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 
		0x10, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	const uint8_t select[8] = {
		0x00, 0x40, 0x70, 0x7E, 0x7E, 0x70, 0x40, 0x00, 
		};

	const uint8_t  icon_rom[24] = {
		0x3f, 0xc0, 0x20, 0x40, 0xe8, 0x70, 0x20, 0x40, 0xe0, 0x70, 0x20, 0x40, 0xe0, 0x70, 0x20, 0x40, 
		0xe0, 0x70, 0x20, 0x40, 0xe0, 0x70, 0x3f, 0xc0
	};

	const uint8_t  icon_raw[24] = {
		0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x11, 0x80, 0x10, 0x80, 0x11, 0x80, 0x1f, 0x00, 0x13, 0x00, 
		0x11, 0x80, 0x10, 0xc0, 0x7c, 0x60, 0x00, 0x00
	};

	const uint8_t  icon_zuluscsi[1024] =  {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x1f, 0xf8, 0x03, 0xf0, 0x07, 0xe1, 0xf0, 0xfc, 0x01, 0xf8, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x1f, 0xf0, 0x07, 0xf0, 0x07, 0xe3, 0xf0, 0xfc, 0x01, 0xf8, 0xe0, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x3f, 0xf0, 0x07, 0xe0, 0x0f, 0xe3, 0xf1, 0xfc, 0x01, 0xf8, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x7f, 0xc0, 0x07, 0xe0, 0x0f, 0xc7, 0xf1, 0xf8, 0x03, 0xf0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0xff, 0xc0, 0x0f, 0xe0, 0x0f, 0xc7, 0xe3, 0xf8, 0x03, 0xf0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x01, 0xff, 0x00, 0x0f, 0xc0, 0x1f, 0x87, 0xe3, 0xf0, 0x03, 0xf1, 0xf8, 0x00, 0x00, 
		0x00, 0x00, 0x03, 0xff, 0x00, 0x0f, 0xc0, 0x1f, 0x87, 0xe3, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x07, 0xfe, 0x00, 0x1f, 0xc0, 0x1f, 0x8f, 0xe3, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0x80, 0x3f, 0x8f, 0xc7, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x1f, 0xf8, 0x00, 0x1f, 0x80, 0x3f, 0x1f, 0xc7, 0xe0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3f, 0xf0, 0x00, 0x3f, 0x80, 0x3f, 0x1f, 0x8f, 0xe0, 0x0f, 0xc7, 0xfe, 0x00, 0x00, 
		0x00, 0x00, 0x7f, 0xe0, 0x00, 0x3f, 0x00, 0x7f, 0x1f, 0x8f, 0xc0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xff, 0xc0, 0x00, 0x3f, 0x00, 0x7e, 0x1f, 0x8f, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x00, 
		0x00, 0x01, 0xff, 0x80, 0x00, 0x3f, 0x00, 0x7e, 0x1f, 0x8f, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x00, 
		0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x7e, 0x3f, 0x1f, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x00, 
		0x00, 0x07, 0xfe, 0x00, 0x00, 0x7e, 0x00, 0xfc, 0x3f, 0x1f, 0x80, 0x3f, 0x9f, 0xff, 0xc0, 0x00, 
		0x00, 0x0f, 0xfc, 0x00, 0x00, 0xfe, 0x00, 0xfc, 0x7f, 0x1f, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x1f, 0xf8, 0x00, 0x00, 0xfe, 0x01, 0xfc, 0x7e, 0x1f, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x3f, 0xff, 0xff, 0xfc, 0xfe, 0x01, 0xf8, 0x7e, 0x1f, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x7f, 0xff, 0xff, 0xfc, 0xff, 0x03, 0xf8, 0x7e, 0x3f, 0x80, 0x7e, 0x3f, 0xff, 0xfc, 0x00, 
		0x00, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xf8, 0xfe, 0x3f, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 
		0x01, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xf8, 0xfc, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
		0x03, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xe1, 0xfc, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
		0x07, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0x81, 0xf8, 0x0f, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xe0, 
		0x0f, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xfe, 0x01, 0xf8, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x07, 0xc0, 0xf8, 0x30, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0xe1, 0xfc, 0x70, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x1c, 0x73, 0x8e, 0x70, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x38, 0x73, 0x06, 0x70, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x70, 0x03, 0x80, 0x60, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x70, 0x01, 0xe0, 0xe0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x60, 0x00, 0xfc, 0xe0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x60, 0x00, 0x1c, 0xc0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x70, 0x66, 0x0c, 0xc0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x70, 0x66, 0x0c, 0xc0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x3f, 0xc7, 0xfc, 0xc0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x1f, 0x83, 0xf9, 0xc0, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0x00, 0xe0, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

};

#endif

// Unused
/*
    const uint8_t smile[8] = {
		0x3C, 0x42, 0xA5, 0x81, 0xA5, 0x99, 0x42, 0x3C, 
		};

	const uint8_t  icon_ro[24] = {
		0x00, 0x00, 0x00, 0x00, 0x71, 0xc0, 0x4a, 0x20, 0x4a, 0x20, 0x72, 0x20, 0x5a, 0x20, 0x4a, 0x20, 
		0x49, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	 const uint8_t  icon_rw[24] = {
		0x00, 0x00, 0x00, 0x00, 0xe4, 0x10, 0x94, 0x10, 0x94, 0x10, 0xe4, 0x90, 0xb2, 0xa0, 0x93, 0xe0, 
		0x91, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	const uint8_t  icon_sequential[24] = {
		0x7f, 0xe0, 0xe0, 0x70, 0xe3, 0x70, 0xe0, 0x70, 0xff, 0xf0, 0xc0, 0x30, 0xd3, 0xb0, 0xd0, 0xb0, 
		0xd1, 0x30, 0xd3, 0xb0, 0xc0, 0x30, 0x7f, 0xe0
	};
*/

#endif