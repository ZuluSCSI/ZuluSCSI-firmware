; ZuluSCSI™ - Copyright (c) 2022-2025 Rabbit Hole Computing™
;
; ZuluSCSI™ firmware is licensed under the GPL version 3 or any later version. 
;
; https://www.gnu.org/licenses/gpl-3.0.html
; ----
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version. 
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details. 
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.

; RP2350 PIO program for accelerating SCSI communication
; Run "pioasm scsi_accel_target_RP2350_wide.pio scsi_accel_target_RP2350_wide.pio.h" to regenerate the C header from this.
.pio_version 1

; Side set is REQ pin
; ACK is a dummy value, will be rewritten on initialization
.define ACK 0

; Write to SCSI bus using asynchronous handshake.
; Data is written as 32-bit words that contain the 16 data bits + 2 parity bits
; Pin mapping:
;    Out:      DB0..DB15, DBP, DBP1
;    Side_set: REQ
;
; NOTE: See pio_add_scsi_accel_async_write_program() for rewrites
.program scsi_accel_async_write
    .side_set 1
    .fifo tx
    .out 18 right auto 18

    out pins, 18         side 1  [0] ; Write data and parity bits, autopull, wait for data preset time
    wait 1 gpio ACK      side 1      ; Wait for ACK to be inactive
    wait 0 gpio ACK      side 0      ; Assert REQ, wait for ACK low

; Read from SCSI bus using sync or async handshake.
; Data is returned as 32-bit words that contain the 16 data bits + 2 parity bits
; One dummy word should be written to TX fifo for every byte to receive.
; Pin mapping:
;    In:       DB0..DB15, DBP, DBP1
;    Side_set: REQ
;
; NOTE: See pio_add_scsi_accel_read_program() for rewrites
.program scsi_accel_read
    .side_set 1
    .in 18 left auto 18
    .out 32 right

    pull block                  side 1  ; Pull from TX fifo for counting bytes and pacing sync mode
    wait 1 gpio ACK             side 1  ; Wait for ACK high
    wait 0 gpio ACK             side 0  ; Assert REQ, wait for ACK low
    in pins, 18                 side 1  ; Deassert REQ, read GPIO, autopush

; Data pacing state machine for synchronous writes.
; Takes one bit from ISR on every falling edge of ACK.
; The C code should set autopull threshold to match scsi_sync_write autopush threshold.
; System DMA will then move words from scsi_sync_write RX fifo to scsi_sync_write_pacer TX fifo.
;
; NOTE: See pio_add_scsi_sync_write_pacer_program() for rewrites
.program scsi_sync_write_pacer
    wait 1 gpio ACK
    wait 0 gpio ACK   ; Wait for falling edge on ACK
    out null, 1       ; Let scsi_sync_write send one more byte

; Data pacing state machine for synchronous reads.
; The delay times will be rewritten by C code to match the negotiated SCSI sync speed.
; Number of bytes to receive minus one should be loaded into register X.
; In synchronous mode this generates the REQ pulses and dummy words.
; In asynchronous mode it just generates dummy words to feed to scsi_accel_read.
.program scsi_sync_read_pacer
    .side_set 1

start:
    push block      [0]      side 1  ; Send dummy word to scsi_accel_read, wait for transfer period
    jmp x-- start   [0]      side 0  ; Assert REQ, wait for assert time

finish:
    jmp finish      [0]      side 1

; Data state machine for synchronous writes.
; Takes the lowest 18 bits of each 32 bit word and writes them to bus with REQ pulse.
; The delay times will be rewritten by C code to match the negotiated SCSI sync speed.
;
; Shifts one bit to ISR per every byte transmitted. This is used to control the transfer
; pace, the RX fifo acts as a counter to keep track of unacknowledged bytes. The C code
; can set the syncOffset by changing autopush threshold, e.g. threshold 3 = 12 bytes offset.
.program scsi_sync_write
    .side_set 1
    .out 18 right auto 18
    .in 1 right auto 1

    out pins, 18     [0]        side 1  ; Write data and parity bit, wait for deskew delay
    nop              [0]        side 0  ; Assert REQ, wait for assert time
    in null, 1       [0]        side 1  ; Deassert REQ, wait for transfer period, wait for space in ACK buffer
