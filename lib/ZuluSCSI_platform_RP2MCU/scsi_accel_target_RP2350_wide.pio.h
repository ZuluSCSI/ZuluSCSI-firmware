// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------------- //
// scsi_accel_async_write //
// ---------------------- //

#define scsi_accel_async_write_wrap_target 0
#define scsi_accel_async_write_wrap 2
#define scsi_accel_async_write_pio_version 1

static const uint16_t scsi_accel_async_write_program_instructions[] = {
            //     .wrap_target
    0x7012, //  0: out    pins, 18        side 1
    0x3080, //  1: wait   1 gpio, 0       side 1
    0x2000, //  2: wait   0 gpio, 0       side 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program scsi_accel_async_write_program = {
    .instructions = scsi_accel_async_write_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = scsi_accel_async_write_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x1
#endif
};

static inline pio_sm_config scsi_accel_async_write_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + scsi_accel_async_write_wrap_target, offset + scsi_accel_async_write_wrap);
    sm_config_set_out_pin_count(&c, 18);
    sm_config_set_out_shift(&c, 1, 1, 18);
    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    return c;
}
#endif

// --------------- //
// scsi_accel_read //
// --------------- //

#define scsi_accel_read_wrap_target 0
#define scsi_accel_read_wrap 3
#define scsi_accel_read_pio_version 1

static const uint16_t scsi_accel_read_program_instructions[] = {
            //     .wrap_target
    0x90a0, //  0: pull   block           side 1
    0x3080, //  1: wait   1 gpio, 0       side 1
    0x2000, //  2: wait   0 gpio, 0       side 0
    0x5012, //  3: in     pins, 18        side 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program scsi_accel_read_program = {
    .instructions = scsi_accel_read_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = scsi_accel_read_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x1
#endif
};

static inline pio_sm_config scsi_accel_read_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + scsi_accel_read_wrap_target, offset + scsi_accel_read_wrap);
    sm_config_set_in_pin_count(&c, 18);
    sm_config_set_in_shift(&c, 0, 1, 18);
    sm_config_set_out_pin_count(&c, 32);
    sm_config_set_out_shift(&c, 1, 0, 32);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// --------------------- //
// scsi_sync_write_pacer //
// --------------------- //

#define scsi_sync_write_pacer_wrap_target 0
#define scsi_sync_write_pacer_wrap 2
#define scsi_sync_write_pacer_pio_version 1

static const uint16_t scsi_sync_write_pacer_program_instructions[] = {
            //     .wrap_target
    0x2080, //  0: wait   1 gpio, 0
    0x2000, //  1: wait   0 gpio, 0
    0x6061, //  2: out    null, 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program scsi_sync_write_pacer_program = {
    .instructions = scsi_sync_write_pacer_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = scsi_sync_write_pacer_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x1
#endif
};

static inline pio_sm_config scsi_sync_write_pacer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + scsi_sync_write_pacer_wrap_target, offset + scsi_sync_write_pacer_wrap);
    return c;
}
#endif

// -------------------- //
// scsi_sync_read_pacer //
// -------------------- //

#define scsi_sync_read_pacer_wrap_target 0
#define scsi_sync_read_pacer_wrap 2
#define scsi_sync_read_pacer_pio_version 1

static const uint16_t scsi_sync_read_pacer_program_instructions[] = {
            //     .wrap_target
    0x9020, //  0: push   block           side 1
    0x0040, //  1: jmp    x--, 0          side 0
    0x1002, //  2: jmp    2               side 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program scsi_sync_read_pacer_program = {
    .instructions = scsi_sync_read_pacer_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = scsi_sync_read_pacer_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config scsi_sync_read_pacer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + scsi_sync_read_pacer_wrap_target, offset + scsi_sync_read_pacer_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// --------------- //
// scsi_sync_write //
// --------------- //

#define scsi_sync_write_wrap_target 0
#define scsi_sync_write_wrap 2
#define scsi_sync_write_pio_version 1

static const uint16_t scsi_sync_write_program_instructions[] = {
            //     .wrap_target
    0x7012, //  0: out    pins, 18        side 1
    0xa042, //  1: nop                    side 0
    0x5061, //  2: in     null, 1         side 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program scsi_sync_write_program = {
    .instructions = scsi_sync_write_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = scsi_sync_write_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config scsi_sync_write_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + scsi_sync_write_wrap_target, offset + scsi_sync_write_wrap);
    sm_config_set_in_pin_count(&c, 1);
    sm_config_set_in_shift(&c, 1, 1, 1);
    sm_config_set_out_pin_count(&c, 18);
    sm_config_set_out_shift(&c, 1, 1, 18);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif
